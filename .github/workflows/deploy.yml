name: Deploy

on:
  push:
    branches: [ main ]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_SSL: 'true'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials   
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Ensure AWS CLI is installed and show version
        run: |
          if ! command -v aws >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y awscli
          fi
          aws --version

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci
        working-directory: backend

      - name: Run tests
        run: echo "No tests"

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG ./backend
          docker push $ECR_REPOSITORY:$IMAGE_TAG

      - name: Run DB migrations
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_SSL: 'true'
        run: npm run migrate
        working-directory: backend


      - name: Prepare SSH key file
        run: |
          printf "%s" "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: SSH | Login to ECR on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key_path: key.pem
          script: |
            REGISTRY_HOST="$(echo "${{ secrets.ECR_REPOSITORY }}" | cut -d/ -f1)"
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
              | docker login --username AWS --password-stdin "$REGISTRY_HOST"

      - name: SSH | Write .env on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key_path: key.pem
          script: |
            mkdir -p /home/ec2-user/app/backend
            cat > /home/ec2-user/app/backend/.env << 'EOF'
            PORT=3000
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_SSL=true
            PGSSLMODE=require
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            EOF

      - name: Build frontend (if applicable)
        working-directory: frontend
        run: |
          if [ -f package.json ]; then
            npm ci
            npm run build || echo "No build script defined, skipping build"
          else
            echo "No package.json in frontend, skipping build"
          fi

      - name: Detect frontend build directory
        id: fe_dir
        run: |
          if [ -d "frontend/dist" ]; then echo "dir=frontend/dist" >> $GITHUB_OUTPUT
          elif [ -d "frontend/build" ]; then echo "dir=frontend/build" >> $GITHUB_OUTPUT
          else echo "dir=frontend" >> $GITHUB_OUTPUT
          fi

      - name: Dry-run S3 sync (no changes)
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: aws s3 sync "${{ steps.fe_dir.outputs.dir }}/" "s3://$S3_BUCKET" --delete --dryrun

      - name: Sync frontend to S3
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: aws s3 sync "${{ steps.fe_dir.outputs.dir }}/" "s3://$S3_BUCKET" --delete

      - name: Verify index.html on S3
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: aws s3 ls "s3://$S3_BUCKET/index.html" || true

      - name: Invalidate CloudFront cache
        env:
          DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
        run: aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

      - name: SSH | Pull image and (re)start backend container on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key_path: key.pem
          script: |
            set -e
            IMAGE="${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}"
            CONTAINER="coworkspace-backend"
            # Stop old containers that may confuse checks (optional cleanup)
            docker rm -f "$CONTAINER" 2>/dev/null || true
            for name in cowork-back youthful_ritchie; do docker rm -f "$name" 2>/dev/null || true; done
            # Pull new image
            docker pull "$IMAGE"
            # Run the new container using the env file written above
            docker run -d --name "$CONTAINER" \
              -p 3001:3000 \
              --env-file /home/ec2-user/app/backend/.env \
              "$IMAGE"
            echo "Waiting for service to respond over HTTP..."
            ok_http=false
            for i in {1..30}; do
              for path in /api/health /health /; do
                code=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3001${path}" || echo 000)
                if [ "$code" -ge 200 ] && [ "$code" -lt 500 ]; then
                  echo "Healthy over HTTP on ${path} (status $code)"
                  ok_http=true
                  break
                fi
              done
              [ "$ok_http" = true ] && break
              sleep 1
            done
            if [ "$ok_http" = true ]; then
              echo "Backend container is up (HTTP)."
              exit 0
            fi
            echo "HTTP check failed; testing raw TCP on port 3001..."
            if (bash -lc '</dev/tcp/127.0.0.1/3001') 2>/dev/null; then
              echo "Port 3001 is open (TCP). Treating as healthy for now."
              exit 0
            fi
            echo "Health checks failed; logs & sockets:"
            docker logs --tail=200 "$CONTAINER" || true
            docker ps
            (ss -ltnp || netstat -ltnp) 2>/dev/null || true
            exit 1
