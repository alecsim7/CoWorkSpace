name: Deploy

on:
  push:
    branches: [ main ]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_SSL: 'true'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials   
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Ensure AWS CLI is installed and show version
        run: |
          if ! command -v aws >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y awscli
          fi
          aws --version

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci
        working-directory: backend

      - name: Run tests
        run: echo "No tests"

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG ./backend
          docker push $ECR_REPOSITORY:$IMAGE_TAG

      - name: Run DB migrations
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_SSL: 'true'
        run: npm run migrate
        working-directory: backend

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
            task-definition: ecs-task-def.json
            cluster: YOUR_CLUSTER_NAME
            service: YOUR_SERVICE_NAME
            wait-for-service-stability: true
            force-new-deployment: true
            image: |
              YOUR_CONTAINER_NAME=${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Build frontend (if applicable)
        working-directory: frontend
        run: |
          if [ -f package.json ]; then
            npm ci
            npm run build || echo "No build script defined, skipping build"
          else
            echo "No package.json in frontend, skipping build"
          fi

      - name: Detect frontend build directory
        id: fe_dir
        run: |
          if [ -d "frontend/dist" ]; then echo "dir=frontend/dist" >> $GITHUB_OUTPUT
          elif [ -d "frontend/build" ]; then echo "dir=frontend/build" >> $GITHUB_OUTPUT
          else echo "dir=frontend" >> $GITHUB_OUTPUT
          fi

      - name: Dry-run S3 sync (no changes)
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: aws s3 sync "${{ steps.fe_dir.outputs.dir }}/" "s3://$S3_BUCKET" --delete --dryrun

      - name: Sync frontend to S3
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: aws s3 sync "${{ steps.fe_dir.outputs.dir }}/" "s3://$S3_BUCKET" --delete

      - name: Verify index.html on S3
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: aws s3 ls "s3://$S3_BUCKET/index.html" || true

      - name: Invalidate CloudFront cache
        env:
          DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
        run: aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
